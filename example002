import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Comparator;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Optional;

import com.fasterxml.jackson.databind.ObjectMapper;

/**
 *
 * @author Administrator
 *
 */
public class TestMain {

    public TestMain() {

    }

    public void proc01() throws Exception {

        System.out.println(equalsWhenOneCharRemoved("x", "y"));
        System.out.println(equalsWhenOneCharRemoved("x", "XX"));
        System.out.println(equalsWhenOneCharRemoved("yy", "yx"));

        System.out.println(equalsWhenOneCharRemoved("abcd", "abxcd"));
        System.out.println(equalsWhenOneCharRemoved("xyz", "xz"));
    }

    public boolean equalsWhenOneCharRemoved(String x, String y) {

        if (null == x || null == y) {
            return false;
        }

        int sub = x.toCharArray().length - y.toCharArray().length;

        if (1 != Math.abs(sub)) {
            return false;
        }

        char[] arrSrc = (sub > 0)?y.toCharArray():x.toCharArray();
        char[] arrDes = (sub > 0)?x.toCharArray():y.toCharArray();

        Arrays.sort(arrSrc);
        Arrays.sort(arrDes);

        int pos = arrSrc.length;

        for (int i = 0; i < arrSrc.length; i++) {
            if (arrSrc[i] != arrDes[i]) {
                pos = i;
                break;
            }
        }

        if (new StringBuilder(new String(arrDes)).deleteCharAt(pos).toString().equals(new String(arrSrc))) {
            return true;
        } else {
            return false;
        }
    }

    public void proc02() throws Exception {

        final String filePath = "D:/temp/jsonData.txt";

        File file = new File(filePath);

        try {
            BufferedReader br = new BufferedReader(new FileReader(file));

            String s;

            Map<String, HashSet<String>> userIdByproductId = new HashMap<String, HashSet<String>>();
            Map<String, Integer> userCntByproductId = new HashMap<String, Integer>();
            Map<String, BigDecimal> quantityByproductId = new HashMap<String, BigDecimal>();

            List<Map<?, ?>> list = new ArrayList<Map<?, ?>>();
            while ((s = br.readLine()) != null) {
                //System.out.println(s);

                ObjectMapper objectMapper = new ObjectMapper();
                Map<?, ?> map = objectMapper.readValue(s, Map.class);

                //System.out.println(map);
                list.add(map);
            }

            for (Map<?, ?> map : list) {
                String userId = (String)map.get("user_id");
                String productId = (String)map.get("product_id");
                BigDecimal quantity = new BigDecimal((Integer)map.get("quantity"));

                if (userIdByproductId.containsKey(productId)) {
                    if (!userIdByproductId.get(productId).contains(userId)) {
                        userIdByproductId.get(productId).add(userId);
                    }
                } else {
                    HashSet<String> userIdList = new HashSet<String>();
                    userIdList.add(userId);

                    userIdByproductId.put(productId, userIdList);
                }

                if (quantityByproductId.containsKey(productId)) {
                    quantityByproductId.get(productId).add(quantity);
                } else {
                    quantityByproductId.put(productId, quantity);
                }
            }

            for (String key : userIdByproductId.keySet()) {
                userCntByproductId.put(key, userIdByproductId.get(key).size());
            }

            //System.out.println(userIdByproductId);
            System.out.println(userCntByproductId);
            System.out.println(quantityByproductId);

            Optional<Entry<String, Integer>> userIdByproductIdMaxEntry = userCntByproductId.entrySet().stream()
                    .max(Comparator.comparing(Map.Entry::getValue));
            Optional<Entry<String, BigDecimal>> quantityByproductIdMaxEntry = quantityByproductId.entrySet().stream()
                    .max(Comparator.comparing(Map.Entry::getValue));

            System.out.println(userIdByproductIdMaxEntry.get().getKey());
            System.out.println(quantityByproductIdMaxEntry.get().getKey());

            br.close();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    public static void main(String[] args) {

        TestMain tm = null;

        try {
            tm = new TestMain();
            //tm.proc01();
            tm.proc02();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}
